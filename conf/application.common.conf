
###########################################
#        default configuration   #
###########################################
# You can override these in application.conf or through system properties.


## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.crypto.secret="changeme"
play.http.secret.key=${play.crypto.secret}

# Allows larger requests. If you have to bump up beyond this size
# consider some other solutions for performance reasons
play.http.parser.maxMemoryBuffer = 500k
# play.http.errorHandler = "ErrorHandler"
play.logger.includeConfigProperties=true
play.modules.enabled += "play.filters.cors.CORSModule"
# play.modules {
#   enabled += "MainModule"
# }

play.http.parser.maxDiskBuffer=100GB
play.forms.binding.directFieldAccess=true

application.home = "."
log.override.path = ${application.home}"/logs"


# ============= START DATABASE RELATED CONFIGURATION ==================================

# Lets disable the default play evolutions and use flyway db 
play.evolutions.enabled=false
# We use our own flyway initializer see: com.yugabyte.yw.common.ybflyway.PlayInitializer
# So we do not need to enable flyway-play module
# play.modules.enabled += "org.flywaydb.play.PlayModule"

# db {
#   # Tracking default postgresql connection details
#   default {
#     host="localhost"
#     port=5432
#     dbname="postgres"
#     username="postgres"
#     username=${?DB_USERNAME}
#     password=""
#     password=${?DB_PASSWORD}
#     driver="org.postgresql.Driver"
#     url="jdbc:postgresql://"${db.default.host}":"${db.default.port}"/"${db.default.dbname}
#     logStatements=true
#     pg_dump_path=""
#     pg_restore_path=""
#     # Config about flyway migrations.
#     migration {
#       table=schema_version
#       initOnMigrate=true
#       auto=true
#       ignoreMigrationPatterns=["*:missing","*:future"]
#       outOfOrder=true
#       scriptsDirectory="default_"
#       # We want to use postgres db in production
#       # The migration scripts will be under resources/db.migration.default.postgres
#       # with common scripts under resources/db.migration.default.common
#       locations=["common","postgres"]
#     }
#   }
#   perf_advisor {
#     # We assume both databases are on the same PG instance. If not - this needs to be overriden
#     username=${db.default.username}
#     password=${db.default.password}
#     url="jdbc:postgresql://"${db.default.host}":"${db.default.port}"/"${db.default.dbname}
#     createDatabaseUrl="jdbc:postgresql://"${db.default.host}":"${db.default.port}"/"${db.default.dbname}
#     migration {
#       ignoreMigrationPatterns=["*:missing","*:future"]
#       table=schema_version
#     }
#   }
# }

# ebean {
#   default = ["*"]
# }
# =============  END DATABASE RELATED CONFIGURATION ==================================

playreact{
  wellKnownCA {
    trustStore {
      path=${?javax.net.ssl.trustStore}""
      password=${?javax.net.ssl.trustStorePassword}""
      type=${?javax.net.ssl.trustStoreType}""
      javaHomePaths = [${java.home}"/lib/security/jssecacerts",  ${java.home}"/lib/security/cacerts"]
    }
  }
  certVerifyBackupRestore{
    is_enforced = true
  }
    rbac {
    use_new_authz=true
  }

    docker {
    network = "bridge"
    release = "/opt/release"
  }
  webhook{
    ws = ${play.ws}
  }
   authtoken {
    # Expiry time of auth token
    # https://github.com/lightbend/config/blob/main/HOCON.md#duration-format for supported formats
    token_expiry = 12 hours
  }

    aws {
    # default volume count for aws instance types with EBS Only storage info
    default_volume_count = 1

    # Default AWS instance type
    default_instance_type = "c5.4xlarge"

    # default volume size for aws instance types with EBS Only storage info
    default_volume_size_gb = 250

    # List of supported AMI arch
    supported_arch_types = ["x86_64", "arm64"]

    # List of supported AMI root device
    supported_root_device_type = ["ebs"]

    # List of supported AMI platform
    supported_platform = ["linux"]

    storage {
      # Default storage type
      default_storage_type = "GP3"

      # GP3 free PIOPS
      gp3_free_piops = 3000

      # GP3 free throughput in MiB/sec
      gp3_free_throughput = 125
    }

    enable_imdsv2_support = true
    iam_credentials_num_retries = 10

    disk_resize_cooldown_hours = 6
  }

  gcp {
    # default volume size for gcp instance types
    default_volume_size_gb = 375

    operations {
      # Polling interval for checking the operation status
      status_polling_interval = 5s

      # Timeout interval for operations to complete
      timeout_interval = 15m

      # Connection draining timeout for the GCP load balancer
      connection_draining_timeout = 5m
    }


    # Default GCP instance type
    default_instance_type = "n1-standard-1"

    storage {
      default_storage_type = "Persistent"
    }

    permissions_sa {
      # additional permissions that are required for a Service Account to create a new VPC
      permissions_new_vpc = ["compute.networks.create", "compute.networks.addPeering"]
      # granular permissions of a Service Account
      min_permissions_sa = ["compute.instances.create", "compute.images.useReadOnly", "compute.instanceTemplates.useReadOnly", "compute.networks.use", "compute.addresses.use", "compute.subnetworks.use", "compute.instances.setMetadata", "compute.instances.setTags", "compute.instances.setLabels", "compute.instances.setServiceAccount", "compute.disks.create", "compute.instances.delete"]
    }

    show_hyperdisks_storage_type = false
    hyperdisk_resize_cooldown_hours = 4
  }

  azure {
    # default volume size for azure instance types
    default_volume_size_gb = 250

    # Default Azure instance type
    default_instance_type = "Standard_DS2_v2"

    storage {
      default_storage_type = "Premium_LRS"
    }

    custom_params {
      vm = ""
      disk = ""
      network = ""
    }

    vm {
      ignore_plan = false
    }

    show_premiumv2_storage_type = false
  }
   # sets logging level for file and stdout logs
  logging {
    config="DEBUG"
    rollover_pattern = "yyyy-MM-dd"
    max_history = "30"
    search_timeout_secs = "60"
    enable_task_failed_request_logs = true
    fileNamePrefix = ""
  }
  storage.path="/opt/playreact"

   # certificate issued would be with expiry of following
  tlsCertificate {
    root.expiryInYears = 4
    server.maxLifetimeInYears = 1
    organizationName = "example.com"
  }

  

}

kamon {
  prometheus {
    embedded-server {
      hostname = "localhost"
      port = 9095
    }
  }
  modules {
    status-page.enabled = false
    process-metrics.enabled = false
  }
}

# 401 Unauthorized
#play.filters.ip.accessDeniedHttpStatusCode = 401